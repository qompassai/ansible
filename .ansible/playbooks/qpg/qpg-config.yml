---
# qpg-config.yml
# Ansible playbook for configuring Quantum-Protected GnuPG (QPG)

- name: Configure QPG with Post-Quantum Cryptography Support
  hosts: all
  become: false # We're working in user space
  vars:
    qpg_install_dir: /opt/qpg
    qpg_config_dir: "{{ ansible_env.HOME }}/.qpg"

  tasks:
    - name: Create QPG configuration directories
      file:
        path: "{{ item }}"
        state: directory
        mode: "0700"
      loop:
        - "{{ qpg_config_dir }}"
        - "{{ qpg_config_dir }}/gpg"
        - "{{ qpg_config_dir }}/agent"
        - "{{ qpg_config_dir }}/dirmngr"

    - name: Configure QPG common settings
      copy:
        dest: "{{ qpg_config_dir }}/common.conf"
        content: |
          # QPG Core Configuration
          keyid-format long
          with-subkey-fingerprint
          no-greeting
          no-emit-version
          default-key-server hkps://keys.openpgp.org

          # Post-Quantum Algorithm Preferences
          personal-cipher-preferences AES256 AES192 AES CAMELLIA256 CAMELLIA192 CAMELLIA128
          personal-digest-preferences SHA512 SHA384 SHA256 SHA224
          personal-compress-preferences ZLIB BZIP2 ZIP Uncompressed

          # Enable and prioritize post-quantum algorithms when available
          # Note: Specific algorithm names depend on the exact version and PQC implementation
          default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAMELLIA256 CAMELLIA192 CAMELLIA128 ZLIB BZIP2 ZIP Uncompressed

          # Prioritize hybrid classical/post-quantum keys when available
          auto-key-locate local keyserver

          # Large secure memory settings
          no-random-seed-file
          no-auto-key-retrieve

          # Enable keyboxd for better key management
          use-keyboxd

          # Set higher resource limits for quantum-resistant operations
          max-cert-depth 10

          # Enhanced security settings
          require-cross-certification
          require-secmem
        mode: "0600"

    - name: Configure QPG gpg.conf
      copy:
        dest: "{{ qpg_config_dir }}/gpg.conf"
        content: |
          # Include common settings
          load-extension common.conf

          # Post-quantum specific GPG settings
          default-new-key-algo rsa4096/cert,sign+rsa4096/encr

          # When PQC is fully supported, you can switch to:
          # default-new-key-algo dilithium/cert,sign+kyber/encr

          # For ML-KEM (Kyber) support when available
          # default-key-format ssh
          # enable-ssh-support
        mode: "0600"

    - name: Configure QPG agent settings
      copy:
        dest: "{{ qpg_config_dir }}/agent.conf"
        content: |
          # Enable large secure memory
          allow-large-secmem
          default-cache-ttl 3600
          max-cache-ttl 86400

          # Enable keyboxd integration
          enable-keyboxd-support

          # Post-quantum related settings
          allow-pkinit-princ
          auto-expand-secmem
        mode: "0600"

    - name: Configure QPG dirmngr settings
      copy:
        dest: "{{ qpg_config_dir }}/dirmngr.conf"
        content: |
          # Use modern TLS
          min-tls-version tls1.2

          # Use HKPS keyservers that might support PQC in the future
          keyserver hkps://keys.openpgp.org
          keyserver hkps://keyserver.ubuntu.com
          keyserver-options no-honor-keyserver-url

          # Tor integration for additional privacy
          # use-tor
        mode: "0600"

    - name: Create enhanced QPG environment activation script
  copy:
    dest: "{{ qpg_config_dir }}/activate-qpg.sh"
    content: |
      #!/bin/bash
      # Script to activate QPG environment

      # Save original values if not already saved
      if [ -z "$ORIGINAL_PATH" ]; then
          export ORIGINAL_PATH="$PATH"
          export ORIGINAL_GNUPGHOME="${GNUPGHOME:-$HOME/.gnupg}"
          export ORIGINAL_LD_LIBRARY_PATH="$LD_LIBRARY_PATH"
          export ORIGINAL_PKG_CONFIG_PATH="$PKG_CONFIG_PATH"
          export ORIGINAL_MANPATH="$MANPATH"
      fi

      # Set QPG environment variables
      export PATH="{{ qpg_install_dir }}/bin:$PATH"
      export GNUPGHOME="$HOME/.qpg"
      export LD_LIBRARY_PATH="{{ qpg_install_dir }}/lib:{{ qpg_install_dir }}/lib64:$LD_LIBRARY_PATH"
      export PKG_CONFIG_PATH="{{ qpg_install_dir }}/lib/pkgconfig:{{ qpg_install_dir }}/lib64/pkgconfig:$PKG_CONFIG_PATH"
      export MANPATH="{{ qpg_install_dir }}/share/man:$MANPATH"

      echo "QPG environment activated. Using QPG from {{ qpg_install_dir }}"
      echo "Run 'deactivate-qpg' to restore original environment"

      # Define deactivation function
      deactivate-qpg() {
          export PATH="$ORIGINAL_PATH"
          export GNUPGHOME="$ORIGINAL_GNUPGHOME"
          export LD_LIBRARY_PATH="$ORIGINAL_LD_LIBRARY_PATH"
          export PKG_CONFIG_PATH="$ORIGINAL_PKG_CONFIG_PATH"
          export MANPATH="$ORIGINAL_MANPATH"
          echo "Original GPG environment restored"
          unset -f deactivate-qpg
      }
    mode: "0700"

- name: Add QPG environment setup to .bashrc
  blockinfile:
    path: "{{ ansible_env.HOME }}/.bashrc"
    block: |
      # QPG (Quantum-Protected GnuPG) Configuration
      if [ -f {{ qpg_config_dir }}/activate-qpg.sh ]; then
          source {{ qpg_config_dir }}/activate-qpg.sh
      fi
    marker: "# {mark} QPG ANSIBLE MANAGED BLOCK"
  when: bashrc_stat.stat.exists

- name: Add QPG environment setup to .zshrc
  blockinfile:
    path: "{{ ansible_env.HOME }}/.zshrc"
    block: |
      # QPG (Quantum-Protected GnuPG) Configuration
      if [ -f {{ qpg_config_dir }}/activate-qpg.sh ]; then
          source {{ qpg_config_dir }}/activate-qpg.sh
      fi
    marker: "# {mark} QPG ANSIBLE MANAGED BLOCK"
  when: zshrc_stat.stat.exists

- name: Add QPG environment setup to .bashrc
  blockinfile:
    path: "{{ ansible_env.HOME }}/.bashrc"
    block: |
      # QPG (Quantum-Protected GnuPG) Configuration
      if [ -f {{ qpg_config_dir }}/setup-env.sh ]; then
          source {{ qpg_config_dir }}/setup-env.sh
      fi
    marker: "# {mark} QPG ANSIBLE MANAGED BLOCK"
  when: bashrc_stat.stat.exists

- name: Check if .zshrc exists
  stat:
    path: "{{ ansible_env.HOME }}/.zshrc"
  register: zshrc_stat

- name: Add QPG environment setup to .zshrc
  blockinfile:
    path: "{{ ansible_env.HOME }}/.zshrc"
    block: |
      # QPG (Quantum-Protected GnuPG) Configuration
      if [ -f {{ qpg_config_dir }}/setup-env.sh ]; then
          source {{ qpg_config_dir }}/setup-env.sh
      fi
    marker: "# {mark} QPG ANSIBLE MANAGED BLOCK"
  when: zshrc_stat.stat.exists

- name: Verify QPG installation
  command: "{{ qpg_install_dir }}/bin/qpg --version"
  register: qpg_version
  changed_when: false
  ignore_errors: true

- name: Display QPG version
  debug:
    msg: "QPG version: {{ qpg_version.stdout }}"
  when: qpg_version.rc == 0

- name: Warning if QPG not found
  debug:
    msg: "WARNING: QPG executable not found at {{ qpg_install_dir }}/bin/qpg. Configuration is complete, but QPG needs to be installed."
  when: qpg_version.rc != 0
